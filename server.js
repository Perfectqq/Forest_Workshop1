// server.js - –û—Å–Ω–æ–≤–Ω–∏–π —Ñ–∞–π–ª —Å–µ—Ä–≤–µ—Ä–∞
const express = require('express');
const mongoose = require('mongoose');
const cors = require('cors');
const path = require('path');
require('dotenv').config({ path: path.join(__dirname, '.env') });

const userRoutes = require('./routes/userRoutes');
const productRoutes = require('./routes/productRoutes');
const orderRoutes = require('./routes/orderRoutes');

// –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –Ω–µ–æ–±—Ö—ñ–¥–Ω–∏—Ö –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
if (!process.env.MONGODB_URI) {
  console.error('‚ùå –ü–æ–º–∏–ª–∫–∞: MONGODB_URI –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞');
  process.exit(1);
}

const app = express();
app.use(express.json());

// CORS –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω—É
const allowedOrigins = [
  'http://localhost:5173',
  'https://forest-workshop1.vercel.app',
  'https://forest-workshop1-f3rj527tg-perfectqqs-projects.vercel.app',
  'https://forest-workshop1-git-master-perfectqqs-projects.vercel.app',
  process.env.FRONTEND_URL
].filter(Boolean);

app.use(cors({
  origin: function(origin, callback) {
    if (!origin || allowedOrigins.includes(origin)) {
      callback(null, true);
    } else {
      console.log('Blocked by CORS:', origin);
      callback(new Error('Not allowed by CORS'));
    }
  },
  credentials: true,
  methods: ['GET', 'POST', 'PUT', 'DELETE', 'PATCH', 'OPTIONS'],
  allowedHeaders: ['Content-Type', 'Authorization', 'X-Requested-With']
}));
console.log('CORS middleware applied with allowed origins:', allowedOrigins);

// –õ–æ–≥—É–≤–∞–Ω–Ω—è –∫–æ–∂–Ω–æ–≥–æ –∑–∞–ø–∏—Ç—É
app.use((req, res, next) => {
  console.log('Request:', req.method, req.originalUrl, 'Origin:', req.headers.origin);
  next();
});

// –õ–æ–≥—É–≤–∞–Ω–Ω—è –¥–ª—è –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
app.use((req, res, next) => {
  console.log('Request path:', req.path);
  console.log('Request method:', req.method);
  console.log('Request headers:', req.headers);
  next();
});

// –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ MongoDB
const MONGODB_URI = process.env.MONGODB_URI;

console.log('üì° –°–ø—Ä–æ–±–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ MongoDB Atlas...');
console.log(`üîó URI: ${MONGODB_URI.replace(/\/\/.*@/, '//<credentials>@')}`);

mongoose.connect(MONGODB_URI)
.then(() => {
  console.log('‚úÖ –£—Å–ø—ñ—à–Ω–æ –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ –¥–æ MongoDB Atlas');
  console.log(`üìä –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö: ${mongoose.connection.name}`);
  console.log(`üåê –•–æ—Å—Ç: ${mongoose.connection.host}`);
})
.catch(err => {
  console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ MongoDB:', err);
  process.exit(1);
});

// –î–æ–¥–∞—Ç–∫–æ–≤—ñ —Å–ª—É—Ö–∞—á—ñ –ø–æ–¥—ñ–π –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è
mongoose.connection.on('error', err => {
  console.error('üî¥ –ü–æ–º–∏–ª–∫–∞ –∑\'—î–¥–Ω–∞–Ω–Ω—è MongoDB:', err);
});

mongoose.connection.on('disconnected', () => {
  console.log('üîå –í—ñ–¥–∫–ª—é—á–µ–Ω–æ –≤—ñ–¥ MongoDB');
});

mongoose.connection.on('reconnected', () => {
  console.log('üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ MongoDB');
});

// API –º–∞—Ä—à—Ä—É—Ç–∏
app.use('/api/users', userRoutes);
app.use('/api/products', productRoutes);
app.use('/api/orders', orderRoutes);

// –†–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥
app.get('/', (req, res) => {
  res.redirect(process.env.FRONTEND_URL || 'http://localhost:5000');
});

// –û–±—Å–ª—É–≥–æ–≤—É–≤–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—á–Ω–∏—Ö —Ñ–∞–π–ª—ñ–≤
app.use(express.static(path.join(__dirname, 'client-vite/dist')));

// –í—ñ–¥–¥–∞—á–∞ SPA –¥–ª—è –≤—Å—ñ—Ö —ñ–Ω—à–∏—Ö –º–∞—Ä—à—Ä—É—Ç—ñ–≤
app.get('*', (req, res) => {
  console.log('Catch-all route triggered for:', req.originalUrl);
  if (req.path.startsWith('/api/')) {
    return res.status(404).json({ message: 'API endpoint not found' });
  }
  res.sendFile(path.join(__dirname, 'client-vite/dist/index.html'));
});

// –û–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–æ–∫
app.use((err, req, res, next) => {
  console.error(err.stack);
  res.status(500).json({ message: '–©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫!' });
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
const PORT = process.env.PORT || 5000;
app.listen(PORT, () => {
  console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω–æ –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
});
